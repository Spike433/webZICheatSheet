Stanja -> na razini citavog sustava(globalno)
	   -> na razini korisnika sustava(kosarica)
	   -> na razini sjednice izmedu korisnika i sustava(login)

Tranzijetna pohrana ->nema trajnog cuvanja stanja
Prezistentna -> trajno cuvanje(pr. sustav i korisnik)

Sjednica -> slijed vremenski omeđenih i logički povezanih 
			transakcija između pojedinog klijenta i poslužitelja
			
			1. pocetak sjednice(zahtijev klijenta prema serveru 
						nakon duljeg vremena neaktivnosti)
			2. trajanje sjednice(logicki povezane transakcije 
								izmedu klijenta i servera)
			3. zavrsetak sjednice(prestanak rada klijenta)

Identifikator sjednice(session token) -> odreduje sjednicu, 
			dodan svakoj transakciji koja pripada sjednici		
			
Prijenos sesssion tokena-a -> URI,header,body

Prijenost stanja -> hidden field, URL rewriting, cookies

Hidden field ->	<input name="naziv" type="hidden" value="SID=abc123">		
 --> pros - podrzan na svakom browseru, ne moze se onemogucit, performanse
 --> cons - vidljivi kod izvornog koda, prijenos kod svake transakcije,koristenje obrazaca

	//index.js\\
//implementacija session-a	
router.use(session.sessionManager); 
if(req.session.access_counter === undefined) // postavi access_counter koji smo izmislili
	req.session.access_counter = 0;

	//sessionFER\\
//session record store
let sessionStore = new Map();
	***
//extract sessionID from GET or POST request
let sessionID = (req.query[sIDName] || req.body[sIDName]);
	***
//fetch the session record
let sidRecord = sessionStore.get(sessionID);
	***
if(!sidRecord) {
sidRecord = {id: uuid.v4(), created: Date.now()};
sessionStore.set(sidRecord.id, sidRecord)
//add the session record to the request object
req.session = sidRecord;
	***
//pass the control to the next middleware layer
next();

Url rewriting ->mehanizam oznacavanja sjednica kada cookie nije dostupan
				(https://www.fer.unizg.hr/predmet/or?sid=234a3f0cc7)
	-->pros - neovisan o browseru, ne moze se onemoguciti na klijentu,jednostavan
	-->const - prijenos kroz URI, ogranicena kolicina, manja citljivost,dodatna funkcionalnost

//add sessionID parameter to URL query segment
return function(url) {
	let newURL = new URL(url)
	newURL.searchParams.append(sIDName, sessionID)
	return newURL.toString()	
}

Cookies -> mala kolicina slobodno definiranih vrijednost, do 4kB
		-> stvara server, sprema klijent		
	--> domena+put=doseg 
	--> sadrzaj - ime=vrijednost,obvezno
	--> domena - ako nije definirano uzima se od servera, npr www.fer.unizg.hr/predmet/or
	--> put - ako nije definiran uzima se dio URI-a,fer.unizg.hr/nastava/or/labosi.html --> /nastava/or
	-->rok valjanosti, ogranicenje pristupa,sigurnost prosljedivanja(isto za druge domene) <-- opcionalno
	
		GET /predmet/or 
		HOst www.fer.unizg.hr
Client--------------------------------------------------------->	
		Set-cookie: sid=mileVOliDisko(sadrzaj); 
		Path=/nastava/or(put);Domain=www.fer.unizg.hr(domena);
		Secure(sigurna veza);HttpOnly(nema lokalnog pristupa);
		Expires: Wed, ...(istjece, moze i Max-age=3600)
<-------------------------------------------------------------Server

Uvjeti prosljedivanja cookie-a
1. server pripada domeni (pr. www.fer.unizg.hr(*host-only),fer.unizg.hr,unizg.hr,hr ->da, carnet.hr->ne)
2. sadrzan unutar puta (/nastava/or/labosi,nastava/or->da, nastava/oop-> ne)
3. nije isteko rok trajanja, 4.ako je defirniran secure salje se kroz https(ne http)
5. ako zabranimo, cookie nece bit proslijeden iz druge domene

		GET /nastava/or 
		Host www.fer.unizg.hr
		Cookie: sid=abc123
Client--------------------------------------------------------->	
		HTTP/1.1 OK
		Content-type: text/html
		...
<-------------------------------------------------------------Server
		GET /intranet/or 
		Host www.fer.unizg.hr
		Cookie: sid=abc123
Client--------------------------------------------------------->	

Trajni -> definiran rok valjanosti
Privremeni -> neamju rok valjanosti, maxAge=0

SameSite -> None(samesite i cross-site), strict(same-site),Lax(??)

//cookies.js\\
res.cookie(req.query.name, req.query.value, { path: req.query.path })
res.clearCookie(req.query.name, {path: req.query.path})

//app.js\\
const cookieParser = require('cookie-parser’)
//cookie parser middleware
app.use(cookieParser());

//page.js\\
router.get('/*', function(req, res, next) {
res.render('page', {
path: req.path,
cookies: req.cookies 
});

Smjestaj tablice ??





